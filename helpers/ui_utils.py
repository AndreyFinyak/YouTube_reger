import time
import random
import threading
import os
import string
from appium.webdriver.common.appiumby import AppiumBy
import subprocess
from proxy_config.proxy_conf import get_next_proxy


def start_stylus_watcher(driver):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞
    'Try out your stylus' –∏ –Ω–∞–∂–∏–º–∞–µ—Ç 'Cancel', –µ—Å–ª–∏ –æ–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å.
    """
    stop_event = threading.Event()

    def stylus_watcher():
        while not stop_event.is_set():
            try:
                cancel_button = driver.find_element(
                    AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().textContains("Cancel")'
                )
                cancel_button.click()
                print("üñäÔ∏è –û–∫–Ω–æ 'Try out your stylus' –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–∫—Ä—ã—Ç–æ.")
                stop_event.set()
            except:
                time.sleep(2)

    thread = threading.Thread(target=stylus_watcher)
    thread.daemon = True
    thread.start()
    return stop_event, thread

def list_avds():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AVD."""
    result = subprocess.run(["emulator", "-list-avds"], capture_output=True, text=True)
    avds = result.stdout.strip().split("\n")
    return avds

def random_hex(length=16):
    return ''.join(random.choices('0123456789abcdef', k=length))

def generate_android_properties():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–∞"""
    return {
        "android_id": random_hex(16),
        "gsf_id": str(random.randint(10**18, 10**19 - 1)),
        "serial": ''.join(random.choices(string.ascii_uppercase + string.digits, k=12)),
    }

def generate_random_fingerprint():
    '''
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π fingerprint –¥–ª—è Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    '''
    brands = ["google", "samsung", "xiaomi", "huawei"]
    models = ["pixel_4", "galaxy_s21", "mi_11", "p40_pro"]
    versions = ["10", "11", "12"]

    brand = random.choice(brands)
    model = random.choice(models)
    version = random.choice(versions)

    fingerprint = f"{brand}/{model}/{model}:{version}/QS1A.200205.001/{random.randint(1000000, 9999999)}:user/release-keys"
    return fingerprint


def patch_avd_config(avd_name: str, fingerprint: str):
    avd_path = os.path.expanduser(f"~/.android/avd/{avd_name}.avd/config.ini")
    if not os.path.exists(avd_path):
        print(f"[ERROR] config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {avd_path}")
        return
    with open(avd_path, "a") as f:
        f.write(f"\nhw.build.fingerprint={fingerprint}\n")
    print(f"[INFO] –ü—Ä–æ–ø–∞—Ç—á–µ–Ω hw.build.fingerprint –≤ config.ini: {fingerprint}")

def wipe_data_and_launch_emulator(avd_name='Pixel_7_Pro', boot_wait: int = 55):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç Wipe Data –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º AVD, –∏—Å–ø–æ–ª—å–∑—É—è Privoxy.

    :param avd_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (AVD)
    :param boot_wait: –°–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
    """

    print(f"[INFO] –í—ã–ø–æ–ª–Ω—è–µ–º Wipe Data –¥–ª—è AVD: {avd_name}...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ AVD
    avds = list_avds()
    if avd_name not in avds:
        print(f"[ERROR] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {avd_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(avds)}")
        return

    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
        subprocess.run(["adb", "emu", "kill"], check=False)
        time.sleep(5)
        patch_avd_config(avd_name, generate_random_fingerprint())
        host, port, login, password = get_next_proxy().split(":")
        proxy = f'http://{login}:{password}@{host}:{port}'
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
        props = generate_android_properties()
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º -http-proxy
        process = subprocess.Popen([
            "/Users/karavan/Library/Android/sdk/emulator/emulator",
            "-avd", avd_name,
            "-wipe-data",
            "-no-snapshot-save",
            "-http-proxy", proxy,
            "-prop", f"persist.sys.android_id={props['android_id']}",
            "-prop", f"ro.serialno={props['serial']}",
            "-prop", f"ro.com.google.gsf.id={props['gsf_id']}",
            "-prop", f"ro.build.fingerprint={generate_random_fingerprint()}",
        ])
        # print(f"[INFO] –≠–º—É–ª—è—Ç–æ—Ä {avd_name} –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ–∫—Å–∏ {proxy_url}. –û–∂–∏–¥–∞–Ω–∏–µ {boot_wait} —Å–µ–∫—É–Ω–¥...")
        time.sleep(boot_wait)
        print(f"[SUCCESS] –≠–º—É–ª—è—Ç–æ—Ä {avd_name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å Wipe Data –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä: {e}")

def close_emulator():
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä.
    """
    try:
        print("[INFO] –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–º—É–ª—è—Ç–æ—Ä...")
        result = subprocess.run(["adb", "emu", "kill"], capture_output=True, text=True)
        if result.returncode == 0:
            print("[SUCCESS] –≠–º—É–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
        else:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —ç–º—É–ª—è—Ç–æ—Ä. –û—à–∏–±–∫–∞: {result.stderr.strip()}")
    except Exception as e:
        print(f"[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å —ç–º—É–ª—è—Ç–æ—Ä: {e}")


def start_appium_server():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Appium —Å–µ—Ä–≤–µ—Ä.
    """
    try:
        print("üëâ –ó–∞–ø—É—Å–∫ Appium —Å–µ—Ä–≤–µ—Ä–∞...")
        process = subprocess.Popen(["appium"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        time.sleep(5)  # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        print("‚úÖ Appium —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Appium —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

